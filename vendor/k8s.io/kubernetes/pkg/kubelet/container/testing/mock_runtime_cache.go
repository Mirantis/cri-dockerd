/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: runtime_cache.go

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	container "k8s.io/kubernetes/pkg/kubelet/container"
)

// MockRuntimeCache is a mock of RuntimeCache interface.
type MockRuntimeCache struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeCacheMockRecorder
}

// MockRuntimeCacheMockRecorder is the mock recorder for MockRuntimeCache.
type MockRuntimeCacheMockRecorder struct {
	mock *MockRuntimeCache
}

// NewMockRuntimeCache creates a new mock instance.
func NewMockRuntimeCache(ctrl *gomock.Controller) *MockRuntimeCache {
	mock := &MockRuntimeCache{ctrl: ctrl}
	mock.recorder = &MockRuntimeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeCache) EXPECT() *MockRuntimeCacheMockRecorder {
	return m.recorder
}

// ForceUpdateIfOlder mocks base method.
func (m *MockRuntimeCache) ForceUpdateIfOlder(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceUpdateIfOlder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceUpdateIfOlder indicates an expected call of ForceUpdateIfOlder.
func (mr *MockRuntimeCacheMockRecorder) ForceUpdateIfOlder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdateIfOlder", reflect.TypeOf((*MockRuntimeCache)(nil).ForceUpdateIfOlder), arg0, arg1)
}

// GetPods mocks base method.
func (m *MockRuntimeCache) GetPods(arg0 context.Context) ([]*container.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", arg0)
	ret0, _ := ret[0].([]*container.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods.
func (mr *MockRuntimeCacheMockRecorder) GetPods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockRuntimeCache)(nil).GetPods), arg0)
}

// MockpodsGetter is a mock of podsGetter interface.
type MockpodsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockpodsGetterMockRecorder
}

// MockpodsGetterMockRecorder is the mock recorder for MockpodsGetter.
type MockpodsGetterMockRecorder struct {
	mock *MockpodsGetter
}

// NewMockpodsGetter creates a new mock instance.
func NewMockpodsGetter(ctrl *gomock.Controller) *MockpodsGetter {
	mock := &MockpodsGetter{ctrl: ctrl}
	mock.recorder = &MockpodsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpodsGetter) EXPECT() *MockpodsGetterMockRecorder {
	return m.recorder
}

// GetPods mocks base method.
func (m *MockpodsGetter) GetPods(arg0 context.Context, arg1 bool) ([]*container.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", arg0, arg1)
	ret0, _ := ret[0].([]*container.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods.
func (mr *MockpodsGetterMockRecorder) GetPods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockpodsGetter)(nil).GetPods), arg0, arg1)
}
